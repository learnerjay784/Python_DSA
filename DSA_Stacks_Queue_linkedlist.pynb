{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOpTD3DiIsTYHQ3ORt++bR8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"TgcLrLTrI20l","executionInfo":{"status":"error","timestamp":1656702488398,"user_tz":-330,"elapsed":9699,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"d1f8852e-1f48-44f6-a7ce-e841dc1cf11b"},"outputs":[{"name":"stdout","output_type":"stream","text":["1000\n"]},{"output_type":"error","ename":"RecursionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-704ebd9a9527>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0msum_rec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-11-704ebd9a9527>\u001b[0m in \u001b[0;36msum_rec\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0msum_rec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","... last 1 frames repeated, from the frame below ...\n","\u001b[0;32m<ipython-input-11-704ebd9a9527>\u001b[0m in \u001b[0;36msum_rec\u001b[0;34m(n)\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0msum_rec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"]}],"source":["#53 sum of n numbers using recursion\n","def sum_rec(n):\n","  if n==0:\n","    return 0\n","  return sum_rec(n-1) + n\n","\n","num = int(input())\n","sum_rec(num)"]},{"cell_type":"code","source":["#55 factorial\n","def fact(n):\n","  if n==0:\n","    return 1\n","  return fact(n-1)*n\n","\n","num = int(input('Enter the number:'))\n","fact(num)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7CX_IISqJ0mv","executionInfo":{"status":"ok","timestamp":1656703176081,"user_tz":-330,"elapsed":3974,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"e0229e1d-9343-4b7c-9545-4f72b43c12fa"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["10\n"]},{"output_type":"execute_result","data":{"text/plain":["3628800"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["#92 Creation and display of linked list\n","class _Node:\n","    __slots__ = '_element', '_next'\n","\n","    def __init__(self, element, next):\n","        self._element = element\n","        self._next = next\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","        self._tail = None\n","        self._size = 0\n","\n","    def __len__(self):\n","        return self._size\n","\n","    def isempty(self):\n","        return self._size == 0\n","\n","    def addlast(self, e):\n","        newest = _Node(e, None)\n","        if self.isempty():\n","            self._head = newest\n","        else:\n","            self._tail._next = newest\n","        self._tail = newest\n","        self._size += 1\n","\n","    def display(self):\n","        p = self._head\n","        while p:\n","            print(p._element,end='-->')\n","            p = p._next\n","        print()\n","\n","    def search(self,key):\n","        p = self._head\n","        index = 0\n","        while p:\n","            if p._element == key:\n","                return index\n","            p = p._next\n","            index += 1\n","        return -1\n","\n","L = LinkedList()\n","L.addlast(7)\n","L.addlast(4)\n","L.addlast(12)\n","L.addlast(8)\n","L.addlast(3)\n","L.display()\n","i = L.search(8)\n","print('Result:',i)\n","index = L.search(20)\n","print('Result:',i)"],"metadata":{"id":"pW6OJYWfMoWq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657825033761,"user_tz":-330,"elapsed":22,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"d8595412-0b24-44a4-da55-9cdf1b87c563"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7-->4-->12-->8-->3-->\n","Result: 3\n","Result: 3\n"]}]},{"cell_type":"code","source":["#137 Stacks using arrays\n","class StacksArray:\n","  def __init__(self):\n","    self._data = []\n","  \n","  def __len__(self):\n","    return len(self._data)\n","  \n","  def isempty(self):\n","    return len(self._data) == 0\n","\n","  def push(self,e):\n","    self._data.append(e)\n","\n","  def pop(self):\n","    if self.isempty():\n","      print('Stack is Empty')\n","      return \n","  \n","  def top(self):\n","    if self.isempty():\n","      print('Stack is Empty')\n","      return\n","    else:\n","      return self._data[-1]\n","\n","S=StacksArray()\n","S.push(5)\n","S.push(3)\n","S.push(7)\n","print(S._data)\n","print('Length:',len(S))\n","print(S.pop())\n","print(S.isempty())\n","S.push(9)\n","S.push(4)\n","print(S.top())\n","print(S._data)\n","\n"],"metadata":{"id":"4j0W92ujEi8h","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658862875011,"user_tz":-330,"elapsed":655,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"fcc6ec8a-6014-44c3-c95d-eec43d8ce9fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 3, 7]\n","Length: 3\n","None\n","False\n","4\n","[5, 3, 7, 9, 4]\n"]}]},{"cell_type":"code","source":["#139 Stacks using linked list\n","class _Node:\n","  __slots__ = '_element','_next'\n","\n","  def __init__(self,element,next):\n","    self._element = element\n","    self._next = next\n","\n","class StacksLinked:\n","  def __init__(self):\n","    self._top = None\n","    self._size = 0\n","\n","  def __len__(self):\n","    return self._size\n","  \n","  def isempty(self):\n","    return self._size == 0\n","\n","  def push(self,e):\n","    newest = _Node(e,None)\n","    if self.isempty():\n","      self._top = newest\n","    else:\n","      newest._next = self._top\n","      self._top = newest\n","    self._size +=1\n","  \n","  def pop(self):\n","    if self.isempty():\n","      print('Stack is Empty')\n","      return \n","    e= self._top._element\n","    self._top = self._top._next\n","    self._size -=1\n","    return e\n","\n","  def top(self):\n","    if self.isempty():\n","      print('Stack is Empty')\n","      return \n","    return self._top._element \n","\n","  def display(self):\n","    p = self._top\n","    while p:\n","      print(p._element,end = '-->')\n","      p = p._next\n","    print()\n","\n","S = StacksLinked()\n","S.push(5)\n","S.push(3)\n","print('Length:',len(S))\n","S.display()\n","print(S.pop())\n","print(S.isempty())\n","S.display()\n","S.push(7)\n","S.push(9)\n","S.push(12)\n","S.display()\n","print(S.top())\n","\n","\n","  "],"metadata":{"id":"-QIrLnob6jMV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658946099735,"user_tz":-330,"elapsed":508,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"1f767808-90f9-41a9-cb5d-724923441441"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Length: 2\n","3-->5-->\n","3\n","False\n","5-->\n","12-->9-->7-->5-->\n","12\n"]}]},{"cell_type":"code","source":["#142 Queues using array \n","class QueuesArray:\n","  def __init__(self):\n","    self._data = []\n","\n","  def __len__(self):\n","    return len(self._data)\n","\n","  def isempty(self):\n","    return len(self._data) == 0\n","\n","  def enqueue(self,e):\n","    self._data.append(e)\n","\n","  def dequeue(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return\n","    return self._data.pop(0)\n","\n","  def first(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return\n","    return self._data[0]\n","  \n","Q = QueuesArray()\n","Q.enqueue(5)\n","Q.enqueue(7)\n","Q.enqueue(12)\n","Q.enqueue(15)\n","print(Q._data)\n","print('length:',len(Q))\n","print(Q.dequeue())\n","Q.enqueue(45)\n","print(Q._data)\n","print(Q.dequeue())\n","\n","\n","\n","\n","\n","\n","    \n"],"metadata":{"id":"RfRSS2OE4oTj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659039084005,"user_tz":-330,"elapsed":436,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"dbb0e4e9-63ac-417b-ec30-22c0329ba6e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 7, 12, 15]\n","length: 4\n","5\n","[7, 12, 15, 45]\n","7\n"]}]},{"cell_type":"code","source":["#144 Queue using linked list\n","class _Node:\n","  __slots__ = '_element','_next'\n","\n","  def __init__(self,element,next):\n","    self._element = element\n","    self._next = next\n","  \n","class QueuesLinked:\n","  def __init__(self):\n","    self._front = None\n","    self._rear = None\n","    self._size = 0\n","  \n","  def __len__(self):\n","    return self._size\n","  \n","  def isempty(self):\n","    return self._size == 0\n","  \n","  def enqueue(self,e):\n","    newest = _Node (e,None)\n","    if self.isempty():\n","      self._front == newest\n","    else:\n","      self._rear._next = newest\n","    self._rear = newest\n","    self._size += 1\n","\n","  def dequeue(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return\n","    e = self._front._element\n","    self._front = self._front._next \n","    self._size -= 1\n","    if self.isempty():\n","      self._rear = None\n","    return e\n","\n","  def first(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return \n","    return self._front._element\n","\n","  def display(self):\n","    p = self._front\n","    while p:\n","      print(p._element,end = '<--')\n","      p = p._next\n","    print()\n","\n","Q = QueuesLinked()\n","Q.enqueue(5)\n","Q.enqueue(3)\n","Q.enqueue(9)\n","Q.enqueue(14)\n","Q.enqueue(8)\n","Q.display()\n","print(Q.first())\n","\n","print('Length:',len(Q))\n","\n"],"metadata":{"id":"Ccv_cFkza3f5","colab":{"base_uri":"https://localhost:8080/","height":389},"executionInfo":{"status":"error","timestamp":1659124379702,"user_tz":-330,"elapsed":707,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"3a8af20f-0beb-4866-c59c-fcbb3fea9c42"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-be6d3735c525>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0mQ\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menqueue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0mQ\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mQ\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfirst\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Length:'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mQ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-8-be6d3735c525>\u001b[0m in \u001b[0;36mfirst\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     43\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Queue is Empty'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m       \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 45\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_front\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_element\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute '_element'"]}]},{"cell_type":"code","source":["#Double ended queue using Array\n","class DEQueArray:\n","  def __init__(self):\n","    self._data = []\n","\n","  def __len__(self):\n","    return len(self._data)\n","\n","  def isempty(self):\n","    return len(self._data) == 0\n","\n","  def addfirst(self,e):\n","    self._data.insert(0,e)\n","\n","  def addlast(self,e):\n","    self._data.append(e)\n","\n","  def removefirst(self):\n","    if self.isempty():\n","      print('DEQue is Empty')\n","      return \n","    return self._data.pop(0)\n","\n","  def removelast(self):\n","    if self.isempty():\n","      print('DEQue is Empty')\n","      return\n","    return self._data.pop()\n","\n","  def first(self):\n","    if self.isempty():\n","      print('DEQue is Empty')\n","      return \n","    return self._data[0]\n","\n","  def last(Self):\n","    if self.isempty():\n","      print('DEQue is Empty')\n","      return \n","    return self._data[-1]\n","\n","D= DEQueArray()\n","D.addfirst(5)\n","D.addlast(7)\n","D.addlast(8)\n","D.addfirst(12)\n","print(D._data)\n","print('Length:',len(D))\n","print(D.removefirst())\n","print(D.removelast())\n","\n","\n","  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fCg-eLfjeQZW","executionInfo":{"status":"ok","timestamp":1659125929364,"user_tz":-330,"elapsed":24,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"1deb976f-5b3a-42b7-96dd-c55fdc291102"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[12, 5, 7, 8]\n","Length: 4\n","12\n","8\n"]}]},{"cell_type":"code","source":["#147 Double Ended Queue using Linked list\n","class _Node:\n","  __slots__ = '_element','_next'\n","\n","  def __init__(self,element,next):\n","    self._element = element\n","    self._next = next\n","  \n","class QueuesLinked:\n","  def __init__(self):\n","    self._front = None\n","    self._rear = None\n","    self._size = 0\n","  \n","  def __len__(self):\n","    return self._size\n","  \n","  def isempty(self):\n","    return self._size == 0\n","  \n","  def enqueue(self,e):\n","    newest = _Node (e,None)\n","    if self.isempty():\n","      self._front == newest\n","    else:\n","      self._rear._next = newest\n","    self._rear = newest\n","    self._size += 1\n","\n","  def dequeue(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return\n","    e = self._front._element\n","    self._front = self._front._next \n","    self._size -= 1\n","    if self.isempty():\n","      self._rear = None\n","    return e\n","\n","  def first(self):\n","    if self.isempty():\n","      print('Queue is Empty')\n","      return \n","    return self._front._element\n","\n","  def display(self):\n","    p = self._front\n","    while p:\n","      print(p._element,end = '<--')\n","      p = p._next\n","    print()\n","\n","Q = QueuesLinked()\n","Q.enqueue(5)\n","Q.enqueue(3)\n","Q.enqueue(9)\n","Q.enqueue(14)\n","Q.enqueue(8)\n","Q.display()\n","print(Q.first())\n","\n","print('Length:',len(Q))"],"metadata":{"id":"2pDMuCeygWUT"},"execution_count":null,"outputs":[]}]}